require "thor"
require "highline"
require "securerandom"
require "cli_spinnable"
require File.expand_path('../../lib/mirros/source.rb', __FILE__)

module GlancrCLI

  class Backup < Thor
    include CliSpinnable

    desc "list", "show a list of all created backups"
    def list

      puts "ID  Type           Created by  Date          Size"
      puts "-------------------------------------------------"
      puts "#1  Full-Backup    marcoroth   15 MÃ¤r 09:59  2.5MB"
      puts "#2  Only-Settings  marcoroth   16 MÃ¤r 15:24  3KB"

      puts "not implemeted"
    end

    desc "create", "create a backup from the current installation"
    def create

      with_spinner do |s|
        s.print "Getting information"
        sleep 1
        s.tick

        s.print "Creating Backup"
        sleep 1
        s.print " ....backup done in 2s"
        s.tick
      end
      puts "Done"

      puts ""
      puts "not implemeted"
    end

    desc "remove <version>", "remove a backup"
    def remove(version)
      puts "not implemeted"
    end

  end

  class Source < Thor
    desc "install <source>", "install a source"
    def install(source = nil)
      unless source.nil?
        MirrOS::Source.install(source)
      else
        puts list
      end
    end

    desc "list", "list all sources"
    def list
      puts "Available sources: \n"

      puts "Module      Version   Developer   Updated      Released"
      puts "News        1.0.3     heckenhugo  17 days ago  10.04.2016"
      puts "Netatmo     1.0.0     marcoroth   3 days ago   19.10.2016"
      puts "Wunderlist  1.0.5     marcoroth   10 days ago  06.03.2017"
    end
  end

  class Widget < Thor

    desc "install <widget>", "install a widget"
    def install(widget = nil)
      unless widget.nil?
        MirrOS::Widget.install(widget)
      else
        puts list
      end
    end

    desc "list", "list all widgets"
    def list
      puts "Available widgets: \n"

      puts "Module      Version   Developer   Updated      Released"
      puts "News        1.0.3     heckenhugo  17 days ago  10.04.2016"
      puts "Netatmo     1.0.0     marcoroth   3 days ago   19.10.2016"
      puts "Wunderlist  1.0.5     marcoroth   10 days ago  06.03.2017"
    end
  end

  class Config < Thor

    desc "set <key> <value>", "set a config"
    def set(key, value)
      puts "Key: #{key}"
      puts "Value: #{value}"
      puts "not implemeted"
    end

    desc "remove <key>", "remove a config"
    def remove(key)
      puts "Key: #{key}"
      puts "not implemeted"
    end

    desc "show <key> [<hello>]", "show a config value"
    def show(key = nil)
      if key.nil?
        puts "*Showing all keys in the config*"
      else
        puts "Key: #{key}"
      end
      puts "not implemeted"
    end

  end

  class Glancr < Thor
    include CliSpinnable

    desc "restore <version>", "restore a backup"
    def restore(version)
      puts "Version: #{version}"
      puts "not implemeted"
    end

    desc "update", "updates mirr.OS"
    def update
      puts "Updating mirr.OS to version '1.0.1' ..."

      with_spinner do |s|
        s.print "Downloading image"
        sleep 3
        s.print " ...downloaded #{(rand*10).to_i}MB"
        s.tick

        s.print "Installing update"
        sleep 2
        s.print " ...update done in 5s"
        s.tick
      end
      puts "Done"
      puts ""
      puts "mirr.OS is now running on version '1.0.1' ðŸŽ‰"
    end

    desc "info", "show information about your mirr.OS installation"
    def info
      puts "glancr-cli, version 1.0.0"
      puts "mirr.OS, version 1.0.0"
      puts "ruby, version 2.5.0"
      puts "rails, version 5.1.4"
      puts "rake, version 12.3.0"
      puts "bundler, version 1.16.1"
    end

    desc "setup", "set up your mirr.OS installation"
    def setup

      cli = HighLine.new
      selected_city = nil
      selected_wlan = nil
      connection = nil
      password = nil
      hidden_wlan = false

      firstname = cli.ask("What's your firstname?") { |q| q.validate = /[a-z]+/ }; puts ""
      lastname = cli.ask("What's your lastname?") { |q| q.validate = /[a-z]+/ }; puts ""
      search_city = cli.ask ("Where do you live?") { |q| q.validate = /[a-z]+/ }

      puts ""

      with_spinner do |s|
        s.print "Searching cities with term '#{search_city}'"
        sleep 3
        s.print " ...found 4"
        s.tick
      end
      puts "Done"

      cities = ["Basel, Schweiz", "Berlin, Deutschland", "Halle, Deutschland", "Hamburg, Deutschland"]

      puts ""

      puts "We found these cities, with term '#{search_city}':"
      cli.choose do |menu|
        cities.each do |city|
          menu.choice(city.to_sym) {
            puts ""
            cli.say("#{city.split(",").first}. That's a beautiful city")
            selected_city = city
          }
        end
        menu.default = cities.first
      end

      wlans = ["MyWLAN", "SomeWLANName", "MyHotspot"]

      puts ""

      with_spinner do |s|
        s.print "Searching WLANs"
        sleep 3
        s.print " ...found 3"
        s.tick
      end
      puts "Done"

      puts ""
      puts "We have found these WLAN's. Select yours"
      cli.choose do |menu|
        wlans.each do |wlan|
          menu.choice(wlan) {
            puts ""
            connection = :wlan
            selected_wlan = wlan
          }
        end

        menu.choice("<%= color('Hidden WLAN', :green) %>") {
          selected_wlan = cli.ask ("What's the name of your hidden WLAN?") { |q| q.validate = /\w+/ }
          connection = :wlan
          hidden_wlan = true
        }

        menu.choice("<%= color('I want to connect via Ethernet', :blue) %>") {
          connection = :ethernet
        }
        menu.default = wlans.first
      end

      unless connection == :ethernet
        password = cli.ask("Enter password for SSID '#{selected_wlan}': ") { |q| q.echo = "*" }
      end

      puts ""
      puts "Firstname: #{firstname}"
      puts "Lastname: #{lastname}"
      puts "City: #{selected_city}"
      puts "Connection: #{connection}"
      puts "WLAN: #{selected_wlan}"
      puts "Hidden WLAN: #{hidden_wlan}"
      puts "Password: #{password}"
      puts ""

      cli.agree("Are these settings correct? Continue? [y/n]")

      puts ""

      with_spinner do |s|
        s.print "Setting up your Glancr"
        sleep 3
        s.print " ...setup complete."
        s.tick
      end
      puts "Done"

      puts ""
      puts "You can now use your Glancr. Have fun."

    end

    desc "reset", "reset your mirr.OS installation"
    def reset
      cli = HighLine.new
      cli.agree("Are you sure? [y/n]")

      puts "not implemeted"
    end

    desc "version", "print the installed and latest version"
    def version

      installed_version = "1.0.0"
      latest_version = "1.0.0"

      puts "Installed Version: #{installed_version}"
      puts "Latest Version: #{latest_version}"

      if installed_version == latest_version
        puts "You're running an up-to-date version!"
      else
        puts "You're not running the latest version. Please consider updating using:"
        puts "glancr update"
      end
    end

    desc "login", "login in with your Glancr ID to register your installation"
    def login
      cli = HighLine.new

      username = cli.ask("Glancr ID:") { |q| q.validate = /\w+/ }; puts ""
      password = cli.ask("Password:") { |q| q.echo = "*"; q.validate = /\w+/ };

      puts ""

      with_spinner do |s|
        s.print "Connecting to glancr.cloud"
        sleep 3
        s.print " ...connected"
        s.tick
      end
      puts "Done"

      puts ""
      puts "Successfully logged in. Welcome Marco"
    end

    desc "account", "print your account inforamtion"
    def account

      types = ["Regular", "Premium", "Developer", "Module-Developer"]

      with_spinner do |s|
        s.print "Connecting to glancr.cloud"
        sleep 3
        s.print " ...connected"
        s.tick
      end
      puts "Done"
      puts ""

      puts "Glancr ID: mr@glancr.de"
      puts "Account-Type: #{types.sample}"
      puts "License: #{SecureRandom.hex}"
      puts "API-Token: #{SecureRandom.hex}"
    end

    desc "backup SUBCOMMAND", "manage backups"
    subcommand "backup", Backup

    desc "widget SUBCOMMAND", "manage widgets"
    subcommand "widgets", Widget

    desc "source SUBCOMMAND", "manage sources"
    subcommand "sources", Source

    desc "config SUBCOMMAND", "manage config"
    subcommand "config", Config

  end
end

GlancrCLI::Glancr.start(ARGV)
