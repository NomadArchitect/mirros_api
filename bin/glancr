require "thor"
require "highline"
require File.expand_path('../../lib/mirros/source.rb', __FILE__)

module GlancrCLI

  class Backup < Thor

    desc "list", "show a list of all created backups"
    def list

      puts "ID  Type           Created by  Date          Size"
      puts "-------------------------------------------------"
      puts "#1  Full-Backup    marcoroth   15 Mär 09:59  2.5MB"
      puts "#2  Only-Settings  marcoroth   16 Mär 15:24  3KB"

      puts "not implemeted"
    end

    desc "create", "create a backup from the current installation"
    def create
      puts "Creating Backup..."
      puts ""

      sleep(5)

      puts "Backup done in 5s"
      puts "#3  Only-Settings  marcoroth   16 Mär 16:12  3KB"

      puts "not implemeted"
    end

    desc "remove <version>", "remove a backup"
    def remove(version)
      puts "not implemeted"
    end

  end

  class Source < Thor
    desc "install <source>", "installs a source"
    def install(source)
      mirr.OS::Source.install(source)
    end

    desc "list", "list all sources"
    def list
      puts "not implemeted"
    end
  end

  class Widget < Thor

    desc "install <widget>", "installs a widget"
    def install(widget)
      mirr.OS::Widget.install(widget)
    end

    desc "list", "list all widgets"
    def list
      puts "not implemeted"
    end
  end

  class Config < Thor

    desc "set <key> <value>", "set a config"
    def set(key, value)
      puts "Key: #{key}"
      puts "Value: #{value}"
      puts "not implemeted"
    end

    desc "remove <key>", "remove a config"
    def remove(key)
      puts "Key: #{key}"
      puts "not implemeted"
    end

    desc "show <key> [<hello>]", "show a config value"
    def show(key, *hello)
      puts "Key: #{key}"
      puts "hello: #{hello}" if hello.present?
      puts "not implemeted"
    end

  end


  class Glancr < Thor

    desc "restore <version>", "restore a backup"
    def restore(version)
      puts "Version: #{version}"
      puts "not implemeted"
    end

    desc "update", "updates mirr.OS"
    def update

      puts "Updating mirr.OS to version '1.0.1' ..."
      puts ""

      sleep(5)

      puts "Update done in 5s"
      puts "mirr.OS is now running on version '1.0.1'"

      puts "not implemeted"
    end

    desc "info", "show information about the your mirr.OS installtion"
    def info
      puts "glancr-cli, version 1.0.0"
      puts "mirr.OS, version 1.0.0"
      puts "ruby, version 2.5.0"
      puts "rails, version 5.1.4"
      puts "rake, version 12.3.0"
      puts "bundler, version 1.16.1"
    end

    desc "setup", "set up your mirr.OS installation"
    def setup

      cli = HighLine.new
      selected_city = nil
      selected_wlan = nil
      connection = nil
      password = nil
      hidden_wlan = false

      firstname = cli.ask("What's your firstname?") { |q| q.validate = /[a-z]+/ }; puts ""
      lastname = cli.ask("What's your lastname?") { |q| q.validate = /[a-z]+/ }; puts ""
      search_city = cli.ask ("Where do you live?") { |q| q.validate = /[a-z]+/ }

      cities = ["Basel", "Berlin", "Halle", "Hamburg"]

      puts ""

      cli.choose do |menu|
        menu.prompt = "We found these cities, select yours."

        cities.each do |city|
          menu.choice(city.to_sym) {
            puts ""
            cli.say("#{city}. That's a beautiful city")
            selected_city = city
          }
        end
        menu.default = cities.first
      end

      wlans = ["MyWLAN", "SomeWLANName", "MyHotspot"]

      puts ""
      cli.choose do |menu|
        menu.prompt = "We have found these WLAN's. Select yours"

        wlans.each do |wlan|
          menu.choice(wlan) {
            puts ""
            connection = :wlan
            selected_wlan = wlan
          }
        end

        menu.choice("<%= color('Hidden WLAN', :green) %>") {
          selected_wlan = cli.ask ("What's the name of your hidden WLAN?") { |q| q.validate = /\w+/ }
          connection = :wlan
          hidden_wlan = true
        }

        menu.choice("<%= color('I want to connect via Ethernet', :blue) %>") {
          connection = :ethernet
        }
        menu.default = wlans.first
      end

      unless connection == :ethernet
        password = cli.ask("Enter the password for '#{selected_wlan}': ") { |q| q.echo = "*" }
      end

      puts ""
      puts "Firstname: #{firstname}"
      puts "Lastname: #{lastname}"
      puts "City: #{selected_city}"
      puts "Connection: #{connection}"
      puts "WLAN: #{selected_wlan}"
      puts "Hidden WLAN: #{hidden_wlan}"
      puts "Password: #{password}"

    end

    desc "reset", "reset your mirr.OS installation"
    def reset
      puts "not implemeted"
    end

    desc "version", "print the installed and latest version"
    def version

      installed_version = "1.0.0"
      latest_version = "1.0.0"

      puts "Installed Version: #{installed_version}"
      puts "Latest Version: #{latest_version}"

      if installed_version == latest_version
        puts "You're running an up-to-date version!"
      else
        puts "You're not running the latest version. Please consider updating using:"
        puts "glancr update"
      end
    end

    desc "backup SUBCOMMAND", "manage backups"
    subcommand "backup", Backup

    desc "widget SUBCOMMAND", "manage widgets"
    subcommand "widgets", Widget

    desc "source SUBCOMMAND", "manage sources"
    subcommand "sources", Source

    desc "config SUBCOMMAND", "manage config"
    subcommand "config", Config

  end
end

GlancrCLI::Glancr.start(ARGV)
